/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package uniproc

import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.parameters.arguments.argument
import com.github.ajalt.clikt.parameters.arguments.optional
import com.github.ajalt.clikt.parameters.options.flag
import com.github.ajalt.clikt.parameters.options.option
import com.github.ajalt.clikt.parameters.types.file
import java.io.File

private val VALID_TARGETS = { "Java" }
private val VALID_TARGETS_LIST = listOf(VALID_TARGETS)

class App: CliktCommand() {
    private val verbose by option("--verbose", "-v", help="Enable Verbose Logging").flag(default = false)
    private val interactive by option("--interactive", "-i", help="Start in interactive REPL mode").flag()
    private val outputPath by option("--output", "-o", help="Output File Path")
    private val targetLanguage by option("-t", "--target", help="Target compile language")
    private val source by argument().file().optional()
    override fun run() {
        if (validateArgs(interactive, outputPath, targetLanguage, source)) {
            if (interactive) {
                // all we can do for now is print a demo
                val parser = Parser(verbose=true)
                while(true) {
                    print("> ")
                    val line = readLine()
                    if (line!=null && line.isNotEmpty()) {
                        parser.executeTokens(parser.parseLine(line))
                    } else {
                        break
                    }
                }
            }
        }
    }

    fun validateArgs(interactive: Boolean, outputPath: String?, targetLanguage: String?, source: File?): Boolean {
        return if (interactive && (outputPath != null || source != null)) {
            System.err.println("Cannot start in interactive mode and have an output or input file!")
            false
        } else if (targetLanguage != null && !VALID_TARGETS_LIST.contains { targetLanguage }) {
            System.err.println("$targetLanguage is not valid!")
            false
        } else {
            true
        }
    }
}

fun main(args: Array<String>) = App().main(args)
